Accepted form: 
					The acceptable strings in the language are 00,11,000,011,100,111 and so on……
DFA 
1.	M= (Q, ∑, δ, Q0, F) where 
2.	Q=Set of all states = {Q0, Q1, Q2, Q3, Q4} 
3.	∑=Input Alphabet = {0,1}
4.	Start state is Q0 and
5.	F=Set of all final States= {Q1 and Q2} And the transitions are defined in the transition diagram
Input: 
input //input string 
Output: 
Algorithm prints a message 
“String accepted”: If the input is acceptable by the language, 
“String not accepted” otherwise,
“Invalid token”: If the input string contains symbols other than input alphabet


#include<stdio.h>
#include<stdlib.h>
void main(){
int state=0,i=0;
char current,in[20];
printf("Enter input string \t :");
scanf("%s",in);
while((current=in[i++])!='\0'){
switch(state)
{
    case 0: 
        if(current=='a')
            state=1;
        else if(current=='b')
            state=3;
        else
        {
            printf("Invalid token");
            exit(0);
        }
    break;
    case 1: 
        if(current=='a')
            state=2;
        else if(current=='b')
            state=3;
        else    
        {
            printf("Invalid token");
            exit(0);
        }
        break;
    case 2:
        if(current=='a')
            state=2;
        else if(current=='b')
            state=3;
        else
        {
            printf("Invalid token");
            exit(0);
        }
        break;
    case 3:
        if(current=='a')
            state=1;
        else if(current=='b')
            state=4;
        else
        {
            printf("Invalid token");
            exit(0);
        }
        break;
    case 4:
        if(current=='a')
            state=1;
        else if(current=='b')
            state=4;
        else
        {
            printf("Invalid token");
            exit(0);
        }
        break;
        }
    }
if(state==2||state==4)
    printf("\n\nString accepted\n\n");
else
    printf("\n\nString not accepted\n\n");
}
